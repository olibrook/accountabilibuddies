// Prisma docs: https://pris.ly/d/prisma-schema
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  stats         Stat[]
  tracks        Track[]
  schedules     Schedule[]

  followedBy Follows[] @relation("following")
  following  Follows[] @relation("follower")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StatType {
  STAT
  GOAL
}

model Stat {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type    StatType @default(STAT)
  trackId String
  track   Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  value Float @default(0)

  // Date, not datetime!
  date DateTime @db.Date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One STAT or GOAL per user, per track, per day
  @@unique([type, userId, trackId, date])
}

model Track {
  id       String    @id @default(uuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String
  stats    Stat[]
  schedule Schedule?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

// Schedule->Track is 1-1 because I think it might expand to N-1 in future.
// Otherwise I'd put put the fields on Track directly.
model Schedule {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Gloriously dumb
  monday    Boolean @default(false)
  tuesday   Boolean @default(false)
  wednesday Boolean @default(false)
  thursday  Boolean @default(false)
  friday    Boolean @default(false)
  saturday  Boolean @default(false)
  sunday    Boolean @default(false)

  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
